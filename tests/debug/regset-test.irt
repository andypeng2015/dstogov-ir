--TEST--
Test
--TARGET--
x86_64
--ARGS--
--debug-regset 0x3ffff --save --dump-live-ranges -S
--CODE--
{
	uintptr_t c_1 = 0;
	bool c_2 = 0;
	bool c_3 = 1;
	double c_4 = 0.5;
	double c_5 = 0;
	int32_t c_6 = 0;
	int32_t c_7 = 1;
	double c_8 = 16;
	int32_t c_9 = 1000;
	l_1 = START(l_35);
	double d_2 = PARAM(l_1, "x", 0);
	double d_3 = PARAM(l_1, "y", 1);
	double d_5 = SUB(d_3, c_4);
	l_10 = END(l_1);
	l_11 = LOOP_BEGIN(l_10, l_37);
	double d_12 = PHI(l_11, c_5, d_25);
	double d_13 = PHI(l_11, c_5, d_23);
	int32_t d_14 = PHI(l_11, c_6, d_15);
	int32_t d_15 = ADD(d_14, c_7);
	double d_17 = MUL(d_13, d_12);
	double d_19 = MUL(d_13, d_13);
	double d_21 = MUL(d_12, d_12);
	double d_22 = SUB(d_19, d_21);
	double d_23 = ADD(d_22, d_5);
	double d_24 = ADD(d_17, d_17);
	double d_25 = ADD(d_24, d_2);
	double d_26 = ADD(d_21, d_19);
	bool d_27 = GT(d_26, c_8);
	l_28 = IF(l_11, d_27);
	l_29 = IF_TRUE(l_28);
	l_30 = RETURN(l_29, d_15);
	l_31 = IF_FALSE(l_28);
	bool d_32 = GT(d_15, c_9);
	l_33 = IF(l_31, d_32);
	l_34 = IF_TRUE(l_33);
	l_35 = RETURN(l_34, c_6, l_30);
	l_36 = IF_FALSE(l_33);
	l_37 = LOOP_END(l_36);
}
--EXPECT--
{
	uintptr_t c_1 = 0;
	bool c_2 = 0;
	bool c_3 = 1;
	double c_4 = 0.5;
	double c_5 = 0;
	int32_t c_6 = 0;
	int32_t c_7 = 1;
	double c_8 = 16;
	int32_t c_9 = 1000;
	l_1 = START(l_22);
	double d_2 = PARAM(l_1, "x", 0);
	double d_3 = PARAM(l_1, "y", 1);
	double d_4 = SUB(d_3, c_4);
	l_5 = END(l_1);
	l_6 = LOOP_BEGIN(l_5, l_29);
	double d_7 = PHI(l_6, c_5, d_28);
	double d_8 = PHI(l_6, c_5, d_26);
	int32_t d_9 = PHI(l_6, c_6, d_10);
	int32_t d_10 = ADD(d_9, c_7);
	double d_11 = MUL(d_8, d_8);
	double d_12 = MUL(d_7, d_7);
	double d_13 = ADD(d_12, d_11);
	bool d_14 = GT(d_13, c_8);
	l_15 = IF(l_6, d_14);
	l_16 = IF_TRUE(l_15);
	l_17 = RETURN(l_16, d_10);
	l_18 = IF_FALSE(l_15);
	bool d_19 = GT(d_10, c_9);
	l_20 = IF(l_18, d_19);
	l_21 = IF_TRUE(l_20);
	l_22 = RETURN(l_21, c_6, l_17);
	l_23 = IF_FALSE(l_20);
	double d_24 = MUL(d_7, d_8);
	double d_25 = SUB(d_11, d_12);
	double d_26 = ADD(d_25, d_4);
	double d_27 = ADD(d_24, d_24);
	double d_28 = ADD(d_27, d_2);
	l_29 = LOOP_END(l_23);
}
{ # LIVE-RANGES (vregs_count=12)
TMP
	[%xmm0]: [5.1-5.3)/1
	[%eax]: [5.1-5.3)/0
R1 (d_2) [SPILL=0x0]
	[%xmm0]: [2.3-5.1), DEF(2.3, hint=%xmm0)
	: [5.1-16.0), [18.0-21.0), [23.0-28.0)
	: [28.0-30.0), USE(28.1/2)
R2 (d_3) [%xmm1]: [3.3-4.0), DEF(3.3, hint=%xmm1), USE(4.0/1, hint=R3)
R3 (d_4) [SPILL=0x8]
	[%xmm1]: [4.0-5.2), DEF(4.0, hint=R2)!
	: [5.2-16.0), [18.0-21.0), [23.0-26.0)
	: [26.0-30.0), USE(26.1/2)
R4 (d_7, d_28) [SPILL=0x10]
	: [6.0-16.0), [18.0-21.0), [23.0-24.0), DEF(7.2), USE(12.0/1, hint=R8), USE(12.0/2), USE(24.0/1)
	[%xmm0]: [28.0-30.0), DEF(28.0, hint=R12)!, PHI_USE(29.2, phi=d_7/3)
R5 (d_8, d_26) [SPILL=0x18]
	[%xmm0]: [6.0-12.0), DEF(8.2), USE(11.0/1, hint=R7), USE(11.0/2)
	: [12.0-16.0), [18.0-21.0), [23.0-24.0)
	: [24.0-24.1), USE(24.1/2, hint=R10)
	[%xmm1]: [26.0-30.0), DEF(26.0, hint=R11)!, PHI_USE(29.2, phi=d_8/3)
R6 (d_9, d_10) [%eax]: [6.0-10.1), [10.2-17.0), [18.0-21.0), [23.0-30.0), DEF(9.2), USE(10.1/1)!, DEF(10.2)!, USE(17.0/2, hint=%eax), USE(20.1/19.1), PHI_USE(29.2, phi=d_9/3)
R7 (d_11) [%xmm1]: [11.0-16.0), [18.0-21.0), [23.0-25.0), DEF(11.0, hint=R5)!, USE(13.1/2), USE(25.0/1, hint=R11)
R8 (d_12) [SPILL=0x20]
	[%xmm0]: [12.0-13.0), DEF(12.0, hint=R4)!, USE(13.0/1, hint=R9)
	: [13.0-16.0), [18.0-21.0), [23.0-25.0)
	: [25.0-25.1), USE(25.1/2)
R9 (d_13) [%xmm0]: [13.0-15.1), DEF(13.0, hint=R8)!, USE(15.1/14.1)!
R10 (d_24) [%xmm0]: [24.0-27.0), DEF(24.0, hint=R4)!, USE(27.0/1, hint=R12), USE(27.0/2)
R11 (d_25) [%xmm1]: [25.0-26.0), DEF(25.0, hint=R7)!, USE(26.0/1, hint=R5)
R12 (d_27) [%xmm0]: [27.0-28.0), DEF(27.0, hint=R10)!, USE(28.0/1, hint=R4)
[%rax] : [17.0-17.1), [22.0-22.1)
[%xmm0] : [1.0-2.3)
[%xmm1] : [1.0-3.3)
}
test:
	subq $0x28, %rsp
	movsd %xmm0, (%rsp)
	subsd .L4(%rip), %xmm1
	movsd %xmm1, 8(%rsp)
	xorpd %xmm0, %xmm0
	movsd %xmm0, 0x10(%rsp)
	xorpd %xmm0, %xmm0
	movsd %xmm0, 0x18(%rsp)
	xorl %eax, %eax
	jmp .L2
	nop
.L1:
	movsd 0x10(%rsp), %xmm0
	mulsd 0x18(%rsp), %xmm0
	subsd 0x20(%rsp), %xmm1
	addsd 8(%rsp), %xmm1
	movsd %xmm1, 0x18(%rsp)
	addsd %xmm0, %xmm0
	addsd (%rsp), %xmm0
	movsd %xmm0, 0x10(%rsp)
.L2:
	leal 1(%rax), %eax
	movsd 0x18(%rsp), %xmm1
	mulsd %xmm1, %xmm1
	movsd 0x10(%rsp), %xmm0
	mulsd %xmm0, %xmm0
	movsd %xmm0, 0x20(%rsp)
	addsd %xmm1, %xmm0
	ucomisd .L5(%rip), %xmm0
	ja .L3
	cmpl $0x3e8, %eax
	jle .L1
	xorl %eax, %eax
	addq $0x28, %rsp
	retq
.L3:
	addq $0x28, %rsp
	retq
.rodata
	.db 0x90, 0x90, 0x90, 0x90
.L4:
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x3f
.L5:
	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x40
