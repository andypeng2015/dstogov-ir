--TEST--
GH-107: incorrect compilation of VADDR at -O0
--ARGS--
-O0 --run
--CODE--
extern func printf(uintptr_t, ...): int32_t;
func print_i32(int32_t): void;
func main(): int32_t;
static const _str [4] = "%d\n\000";
func print_i32(int32_t): void
{
	uintptr_t c_1 = 0;
	bool c_2 = 0;
	bool c_3 = 1;
	uintptr_t c_4 = sym(_str);
	uintptr_t c_5 = func printf(uintptr_t, ...): int32_t;
	l_1 = START(l_8);
	int32_t d_2 = PARAM(l_1, "arg_1", 1);
	int32_t d_3 = VAR(l_1, "var_3");
	l_4 = VSTORE(l_1, d_3, d_2);
	int32_t d_5, l_5 = VLOAD(l_4, d_3);
	int32_t d_6, l_6 = CALL/2(l_5, c_5, c_4, d_5);
	l_8 = RETURN(l_6, null);
}
func main(): int32_t
{
	uintptr_t c_1 = 0;
	bool c_2 = 0;
	bool c_3 = 1;
	int32_t c_4 = 0;
	int32_t c_5 = 999;
	uintptr_t c_6 = 4;
	uintptr_t c_7 = func print_i32(int32_t): void;
	l_1 = START(l_16);
	int32_t d_2 = VAR(l_1, "$ret");
	l_3 = VSTORE(l_1, d_2, c_4);
	int32_t d_4 = VAR(l_1, "x");
	l_5 = VSTORE(l_3, d_4, c_5);
	uintptr_t d_6 = VADDR(d_4);
	uintptr_t d_7 = VAR(l_1, "px");
	l_8 = VSTORE(l_5, d_7, d_6);
	uintptr_t d_9 = MUL(c_6, c_4);               // result d_9 is 0
	uintptr_t d_10, l_10 = VLOAD(l_8, d_7);     // reload the value in "px"
	uintptr_t d_11 = ADD(d_10, d_9);            // add 0 to it
	int32_t d_12, l_12 = LOAD(l_10, d_11);      // load from that address
	l_13 = CALL/1(l_12, c_7, d_12);
	l_14 = VSTORE(l_13, d_2, c_4);
	int32_t d_15, l_15 = VLOAD(l_14, d_2);
	l_16 = RETURN(l_15, d_15);
}
--EXPECT--
999
